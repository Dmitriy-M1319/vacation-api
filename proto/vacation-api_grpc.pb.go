// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// VacationsServiceClient is the client API for VacationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VacationsServiceClient interface {
	// Получить всех работников вместе с отпусками
	GetAllEmployeers(ctx context.Context, in *EmptyResponse, opts ...grpc.CallOption) (*ManyEmployeersResponse, error)
	// Получить cотрудника по его номеру
	GetEmployeeById(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*EmployeeResponse, error)
	// Добавить нового сотрудника в базу данных
	InsertEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Обновить данные для сотрудника
	UpdateEmployee(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*EmployeeResponse, error)
	// Удалить сотрудника из базы данных
	DeleteEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Получить список отпусков для определенного работника
	GetVacationsByEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*ManyVacationsResponse, error)
	// Получить отпуск по его уникальному идентификатору
	GetVacationById(ctx context.Context, in *VacationId, opts ...grpc.CallOption) (*VacationResponse, error)
	// Добавить новый отпуск для сотрудника в базу данных
	InsertVacation(ctx context.Context, in *Vacation, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Обновить данные для отпуска
	UpdateVacation(ctx context.Context, in *UpdateVacRequest, opts ...grpc.CallOption) (*VacationResponse, error)
	// Удалить отпуск сотрудника из базы данных
	DeleteVacation(ctx context.Context, in *VacationId, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type vacationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVacationsServiceClient(cc grpc.ClientConnInterface) VacationsServiceClient {
	return &vacationsServiceClient{cc}
}

func (c *vacationsServiceClient) GetAllEmployeers(ctx context.Context, in *EmptyResponse, opts ...grpc.CallOption) (*ManyEmployeersResponse, error) {
	out := new(ManyEmployeersResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/GetAllEmployeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) GetEmployeeById(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) InsertEmployee(ctx context.Context, in *Employee, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/InsertEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) UpdateEmployee(ctx context.Context, in *UpdateEmpRequest, opts ...grpc.CallOption) (*EmployeeResponse, error) {
	out := new(EmployeeResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) DeleteEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/DeleteEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) GetVacationsByEmployee(ctx context.Context, in *EmployeeId, opts ...grpc.CallOption) (*ManyVacationsResponse, error) {
	out := new(ManyVacationsResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/GetVacationsByEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) GetVacationById(ctx context.Context, in *VacationId, opts ...grpc.CallOption) (*VacationResponse, error) {
	out := new(VacationResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/GetVacationById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) InsertVacation(ctx context.Context, in *Vacation, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/InsertVacation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) UpdateVacation(ctx context.Context, in *UpdateVacRequest, opts ...grpc.CallOption) (*VacationResponse, error) {
	out := new(VacationResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/UpdateVacation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vacationsServiceClient) DeleteVacation(ctx context.Context, in *VacationId, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/VacationsService/DeleteVacation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VacationsServiceServer is the server API for VacationsService service.
// All implementations must embed UnimplementedVacationsServiceServer
// for forward compatibility
type VacationsServiceServer interface {
	// Получить всех работников вместе с отпусками
	GetAllEmployeers(context.Context, *EmptyResponse) (*ManyEmployeersResponse, error)
	// Получить cотрудника по его номеру
	GetEmployeeById(context.Context, *EmployeeId) (*EmployeeResponse, error)
	// Добавить нового сотрудника в базу данных
	InsertEmployee(context.Context, *Employee) (*EmptyResponse, error)
	// Обновить данные для сотрудника
	UpdateEmployee(context.Context, *UpdateEmpRequest) (*EmployeeResponse, error)
	// Удалить сотрудника из базы данных
	DeleteEmployee(context.Context, *EmployeeId) (*EmptyResponse, error)
	// Получить список отпусков для определенного работника
	GetVacationsByEmployee(context.Context, *EmployeeId) (*ManyVacationsResponse, error)
	// Получить отпуск по его уникальному идентификатору
	GetVacationById(context.Context, *VacationId) (*VacationResponse, error)
	// Добавить новый отпуск для сотрудника в базу данных
	InsertVacation(context.Context, *Vacation) (*EmptyResponse, error)
	// Обновить данные для отпуска
	UpdateVacation(context.Context, *UpdateVacRequest) (*VacationResponse, error)
	// Удалить отпуск сотрудника из базы данных
	DeleteVacation(context.Context, *VacationId) (*EmptyResponse, error)
	mustEmbedUnimplementedVacationsServiceServer()
}

// UnimplementedVacationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVacationsServiceServer struct {
}

func (UnimplementedVacationsServiceServer) GetAllEmployeers(context.Context, *EmptyResponse) (*ManyEmployeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmployeers not implemented")
}
func (UnimplementedVacationsServiceServer) GetEmployeeById(context.Context, *EmployeeId) (*EmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (UnimplementedVacationsServiceServer) InsertEmployee(context.Context, *Employee) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEmployee not implemented")
}
func (UnimplementedVacationsServiceServer) UpdateEmployee(context.Context, *UpdateEmpRequest) (*EmployeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}
func (UnimplementedVacationsServiceServer) DeleteEmployee(context.Context, *EmployeeId) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEmployee not implemented")
}
func (UnimplementedVacationsServiceServer) GetVacationsByEmployee(context.Context, *EmployeeId) (*ManyVacationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacationsByEmployee not implemented")
}
func (UnimplementedVacationsServiceServer) GetVacationById(context.Context, *VacationId) (*VacationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVacationById not implemented")
}
func (UnimplementedVacationsServiceServer) InsertVacation(context.Context, *Vacation) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertVacation not implemented")
}
func (UnimplementedVacationsServiceServer) UpdateVacation(context.Context, *UpdateVacRequest) (*VacationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVacation not implemented")
}
func (UnimplementedVacationsServiceServer) DeleteVacation(context.Context, *VacationId) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVacation not implemented")
}
func (UnimplementedVacationsServiceServer) mustEmbedUnimplementedVacationsServiceServer() {}

// UnsafeVacationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VacationsServiceServer will
// result in compilation errors.
type UnsafeVacationsServiceServer interface {
	mustEmbedUnimplementedVacationsServiceServer()
}

func RegisterVacationsServiceServer(s *grpc.Server, srv VacationsServiceServer) {
	s.RegisterService(&_VacationsService_serviceDesc, srv)
}

func _VacationsService_GetAllEmployeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).GetAllEmployeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/GetAllEmployeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).GetAllEmployeers(ctx, req.(*EmptyResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).GetEmployeeById(ctx, req.(*EmployeeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_InsertEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Employee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).InsertEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/InsertEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).InsertEmployee(ctx, req.(*Employee))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).UpdateEmployee(ctx, req.(*UpdateEmpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_DeleteEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).DeleteEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/DeleteEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).DeleteEmployee(ctx, req.(*EmployeeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_GetVacationsByEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).GetVacationsByEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/GetVacationsByEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).GetVacationsByEmployee(ctx, req.(*EmployeeId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_GetVacationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).GetVacationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/GetVacationById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).GetVacationById(ctx, req.(*VacationId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_InsertVacation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vacation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).InsertVacation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/InsertVacation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).InsertVacation(ctx, req.(*Vacation))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_UpdateVacation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).UpdateVacation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/UpdateVacation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).UpdateVacation(ctx, req.(*UpdateVacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VacationsService_DeleteVacation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VacationId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VacationsServiceServer).DeleteVacation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VacationsService/DeleteVacation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VacationsServiceServer).DeleteVacation(ctx, req.(*VacationId))
	}
	return interceptor(ctx, in, info, handler)
}

var _VacationsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "VacationsService",
	HandlerType: (*VacationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllEmployeers",
			Handler:    _VacationsService_GetAllEmployeers_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _VacationsService_GetEmployeeById_Handler,
		},
		{
			MethodName: "InsertEmployee",
			Handler:    _VacationsService_InsertEmployee_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _VacationsService_UpdateEmployee_Handler,
		},
		{
			MethodName: "DeleteEmployee",
			Handler:    _VacationsService_DeleteEmployee_Handler,
		},
		{
			MethodName: "GetVacationsByEmployee",
			Handler:    _VacationsService_GetVacationsByEmployee_Handler,
		},
		{
			MethodName: "GetVacationById",
			Handler:    _VacationsService_GetVacationById_Handler,
		},
		{
			MethodName: "InsertVacation",
			Handler:    _VacationsService_InsertVacation_Handler,
		},
		{
			MethodName: "UpdateVacation",
			Handler:    _VacationsService_UpdateVacation_Handler,
		},
		{
			MethodName: "DeleteVacation",
			Handler:    _VacationsService_DeleteVacation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vacation-api.proto",
}
